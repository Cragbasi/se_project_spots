!function(){"use strict";function e(e,t,r){e.querySelector(`.${t.id}-error`).classList.remove(r.errorClass),t.classList.remove(r.inputErrorClass)}const t=e=>{e.disabled=!0},r=(t,r)=>{Array.from(t.querySelectorAll(r.inputSelector)).forEach((o=>{e(t,o,r)}))},o={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button-save",inactiveButtonClass:"modal__button-save_disabled",inputErrorClass:"modal__input_error",errorClass:"modal__input-error_active"},n=document.querySelector(".page"),s=n.querySelector(".profile"),a=n.querySelector("#editProfileButton"),c=n.querySelector("#editProfileOverlayedButton"),i=n.querySelector("#newPostButton"),l=n.querySelector("#editProfile"),d=n.querySelector("#editProfileAvatar"),u=l.querySelector("#saveEditProfile"),h=document.forms.editProfileAvatarForm,v=n.querySelector("#newPost"),f=v.querySelector("#saveNewPostButton"),m=l.querySelector("#closeEditProfileButton"),y=d.querySelector("#closeEditProfileAvatarButton"),_=d.querySelector("#editProfileAvatarSubmitButton"),S=v.querySelector("#closeNewPostButton"),p=l.querySelector("#formEditProfile"),q=document.forms.formNewPost,E=n.querySelector("#clickedPicture"),k=E.querySelector(".modal__image"),L=E.querySelector(".modal__image-title"),b=n.querySelector(".cards"),C=n.querySelector("#deleteImageQuery"),g=C.querySelector("#confirmCardDelete"),P=C.querySelector("#cancelCardDelete"),x=Array.from(n.querySelectorAll(".modal"));let A,U;const B=new class{constructor(e){this._options=e}getUserData(){return Promise.all([this.renderUserInfo(),this.getInitialCards()])}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${res.status}`)}renderUserInfo(){return fetch(`${this._options.baseUrl}/users/me`,{headers:this._options.headers}).then((e=>this._checkResponse(e)))}editUserInfo(e){let{name:t,about:r}=e;return fetch(`${this._options.baseUrl}/users/me`,{method:"PATCH",headers:this._options.headers,body:JSON.stringify({name:t,about:r})}).then((e=>this._checkResponse(e)))}getInitialCards(){return fetch(`${this._options.baseUrl}/cards`,{headers:this._options.headers}).then((e=>this._checkResponse(e)))}postCard(e,t){return fetch(`${this._options.baseUrl}/cards`,{method:"POST",headers:this._options.headers,body:JSON.stringify({name:e,link:t})}).then((e=>this._checkResponse(e)))}removeCard(e){return fetch(`${this._options.baseUrl}/cards/${e}`,{method:"DELETE",headers:this._options.headers,body:JSON.stringify({cardId:e})}).then((e=>this._checkResponse(e)))}addLike(e,t){return fetch(`${this._options.baseUrl}/cards/${e}/likes`,{method:t,headers:this._options.headers,body:JSON.stringify({cardId:e})}).then((e=>this._checkResponse(e)))}changeProfilePicture(e){return fetch(`${this._options.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._options.headers,body:JSON.stringify({avatar:e})}).then((e=>this._checkResponse(e)))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"263132f6-100d-422f-9deb-cb4a2234cfd1","Content-Type":"application/json"}});B.getUserData().then((e=>{let[t,r]=e;var o;o=t,$[0].textContent=o.name,$[1].textContent=o.about,N.src=o.avatar,T(r)})).catch((e=>{let[t,r]=e;console.error(t,r)}));const D=n.querySelector(".avatar__information"),$=[D.querySelector(".avatar__name"),D.querySelector(".avatar__description")],I=[l.querySelector("#name"),l.querySelector("#description")],w=[v.querySelector("#picture"),v.querySelector("#caption")],N=s.querySelector(".avatar__image"),R=d.querySelector("#picture");function T(e){if(Array.isArray(e))e.forEach((e=>{const t=J(e);b.append(t)}));else{const t=J(e);b.prepend(t)}}function O(e){e.classList.toggle("card__love-button_activated")}function J(e){const t=b.querySelector("#card").content.querySelector(".card").cloneNode(!0),r=t.querySelector(".card__image");r.src=e.link,r.alt=e.name,t.querySelector(".card__description").textContent=e.name;const o=t.querySelector(".card__love-button");return e.isLiked&&O(o),o.addEventListener("click",(()=>{!function(e,t){e.classList.contains("card__love-button_activated")?B.addLike(t,"DELETE").then((t=>{console.log(t),O(e)})).catch(console.error):B.addLike(t,"PUT").then((t=>{console.log(t),O(e)})).catch(console.error)}(o,e._id)})),t.querySelector(".card__delete-button").addEventListener("click",(()=>{A=t,U=e._id,j(C)})),r.addEventListener("click",(()=>{var e,o;e=t,o=r,k.src=o.src,k.alt=o.alt,L.textContent=e.textContent,j(E)})),t}function j(e){e.classList.add("modal_opened"),document.addEventListener("keydown",Q)}function H(e){e.classList.remove("modal_opened"),document.removeEventListener("keydown",Q)}a.addEventListener("click",(()=>{r(l,o),t(u),j(l);for(let e=0;e<I.length;e++)I[e].value=$[e].textContent})),c.addEventListener("click",(()=>{r(d,o),t(h),j(d)})),g.addEventListener("click",(function(){g.textContent="Deleting...",B.removeCard(U).then((()=>{var e;(e=A).remove(e),H(C)})).catch(console.error).finally((()=>{g.textContent="Delete"}))})),P.addEventListener("click",(()=>H(C))),E.querySelector("#closeImageButton").addEventListener("click",(()=>{H(E)})),C.querySelector("#closeDeleteImageQueryButton").addEventListener("click",(()=>{H(C)}));const Q=e=>{"Escape"!==e.key&&"Esc"!==e.key||x.forEach((e=>{e.classList.contains("modal_opened")&&H(e)}))};var z;x.forEach((e=>{e.addEventListener("mousedown",(t=>{e.classList.contains("modal_opened")&&t.target===t.currentTarget&&H(t.target)}))})),m.addEventListener("click",(()=>{H(l)})),y.addEventListener("click",(()=>{H(d)})),i.addEventListener("click",(()=>{j(v)})),S.addEventListener("click",(function(){H(v)})),p.addEventListener("submit",(function(e){e.preventDefault(),u.textContent="Saving...",B.editUserInfo({name:I[0].value,about:I[1].value}).then((e=>{for(let e=0;e<I.length;e++)$[e].textContent=I[e].value;t(u),p.reset(),H(l)})).catch((e=>{console.error(e)})).finally((()=>{u.textContent="Save"}))})),q.addEventListener("submit",(function(e){e.preventDefault(),f.textContent="Saving...";const r={name:w[1].value,link:w[0].value};B.postCard(r.name,r.link).then((e=>{T(e),t(f),q.reset(),H(v)})).catch((e=>{console.error(e)})).finally((()=>{f.textContent="Save"}))})),h.addEventListener("submit",(function(e){e.preventDefault(),_.textContent="Saving...",B.changeProfilePicture(R.value).then((e=>{N.src=R.value,t(_),h.reset(),H(d)})).catch((e=>{console.error(e)})).finally((()=>{_.textContent="Save"}))})),z=o,document.querySelectorAll(z.formSelector).forEach((r=>{!function(r,o){const n=Array.from(r.querySelectorAll(o.inputSelector));n.forEach((s=>{s.addEventListener("input",(a=>{!function(t,r,o){r.validity.valid?e(t,r,o):function(e,t,r){const o=e.querySelector(`.${t.id}-error`);o.textContent=t.validationMessage,o.classList.add(r.errorClass),t.classList.add(r.inputErrorClass)}(t,r,o)}(r,s,o),function(e,r,o){const n=r.querySelector(o.submitButtonSelector);(e=>e.some((e=>!e.validity.valid)))(e)?t(n):n.disabled=!1}(n,r,o)}))}))}(r,z)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,